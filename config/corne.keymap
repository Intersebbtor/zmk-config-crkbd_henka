/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
//Layers 

#define Base 0
#define Lower 1
#define Raise 2
#define Funct 3

// screenshot shorts

#define SCSH &kp LS(LG(NUMBER_4)) //screenshot to clipboard

// Magnet shorts

#define MAGlft &kp LC(LA(LEFT)) //Left half
#define MAGrght &kp LC(LA(RIGHT)) //Right half
#define MAGtl &kp LC(LA(U)) //Top Left
#define MAGtr &kp LC(LA(I)) //Top right
#define MAGbl &kp LC(LA(J)) //Bottom left
#define MAGbr &kp LC(LA(K)) //Bottom right
#define MAGmax  &kp LC(LA(RETURN)) //Maximise

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    combos {
        compatible = "zmk,combos";

        btl {
            bindings = <&mo 3>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
  &kp TAB  &kp Q  &kp W  &kp E         &kp R          &kp T      &kp Y          &kp U      &kp I    &kp O     &kp P  &kp GRAVE
&kp LCTRL  &kp A  &kp S  &kp D         &kp F          &kp G      &kp H          &kp J      &kp K    &kp L  &kp SEMI  &kp ENTER
&kp LSHFT  &kp Z  &kp X  &kp C         &kp V          &kp B      &kp N          &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &mo 1  &kp LEFT_GUI  &kp BACKSPACE  &kp SPACE  &kp RIGHT_ALT      &mo 2
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
  &kp ESC  &trans    &trans                                                 &kp UP         &trans     &trans     &kp APOSTROPHE  &kp NUMBER_1  &kp NUMBER_2     &kp NUMBER_3   &kp PLUS     &kp DEL
&kp LCTRL  &trans  &kp LEFT                                               &kp DOWN      &kp RIGHT     &trans  &kp DOUBLE_QUOTES  &kp NUMBER_4  &kp NUMBER_5     &kp NUMBER_6  &kp MINUS  &kp RETURN
&kp LSHFT  &trans    &trans  &trans &kp LS(LG(NUMBER_4)) //screenshot to clipboard         &trans     &trans       &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp KP_MULTIPLY     &trans      &trans
                                                                      &kp LEFT_GUI  &kp BACKSPACE  &kp SPACE      &kp RIGHT_ALT  &kp NUMBER_0
            >;
        };

        raise_layer {
            label = "Raise";
            bindings = <
  &kp ESC  &kp EXCL  &kp AT  &kp HASH      &kp DLLR      &kp PRCNT  &kp CARET       &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR    &kp BSPC
&kp LCTRL    &trans  &trans    &trans        &trans         &trans  &kp MINUS      &kp EQUAL         &kp LBKT  &kp RBKT  &kp BSLH  &kp RETURN
&kp LSHFT    &trans  &trans    &trans        &trans         &trans  &kp UNDER       &kp PLUS         &kp LBRC  &kp RBRC  &kp PIPE   &kp TILDE
                               &trans  &kp LEFT_GUI  &kp BACKSPACE  &kp SPACE  &kp RIGHT_ALT           &trans
            >;
        };

        BT_layer {
            label = "Funct";
            bindings = <
 &bootloader                                                              &trans        &trans        &trans                                                           &trans  &trans  &trans &kp LC(LA(U)) //Top Left &kp LC(LA(I)) //Top right  &trans  &trans  &trans  &bt BT_CLR  &bt BT_SEL 0
&bt BT_SEL 1                                                        &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans &kp LC(LA(J)) //Bottom left &kp LC(LA(K)) //Bottom right  &trans                       &trans &kp LC(LA(RETURN)) //Maximise  &trans  &trans  &trans      &trans        &trans
      &trans  &trans &kp LC(LA(LEFT)) //Left half &kp LC(LA(RIGHT)) //Right half        &trans        &trans                                                           &trans  &trans                                                     &trans  &trans  &trans  &trans      &trans
            >;
        };
    };
};
