/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
//Layers 

#define Base 0
#define Lower 1
#define Raise 2
#define Funct 3

// #define block
// #define SCSH &kp LS(LG(NUMBER_4))

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&lt { tapping-term-ms = <150>; };

/ {
    behaviors {
        lslc: lslc {
            compatible = "zmk,behavior-tap-dance";
            label = "LSLC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_SHIFT>, <&kp LCTRL>;
        };

        rsra: rsra {
            compatible = "zmk,behavior-tap-dance";
            label = "RSRA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RIGHT_SHIFT>, <&kp RALT>;
        };

        long_mt: long_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "LONG_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    macros {
        ae: ae {
            compatible = "zmk,behavior-macro";
            label = "AE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp A>;
        };

        oe: oe {
            compatible = "zmk,behavior-macro";
            label = "OE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp O>;
        };

        ue: ue {
            compatible = "zmk,behavior-macro";
            label = "UE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp U>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&trans  &kp Q                &kp W  &kp E   &kp R               &kp T            &kp Y        &kp U      &kp I      &kp O    &kp P                 &trans
&trans  &long_mt LEFT_ALT A  &kp S  &kp D   &kp F               &kp G            &kp H        &kp J      &kp K      &kp L    &kp SEMI              &trans
&trans  &mt LEFT_SHIFT Z     &kp X  &kp C   &kp V               &kp B            &kp N        &kp M      &kp COMMA  &kp DOT  &mt LEFT_SHIFT SLASH  &trans
                                    &trans  &mt LEFT_GUI MINUS  &lt 1 BACKSPACE  &lt 3 SPACE  &lt 2 TAB  &trans
            >;
        };

        layer_1 {
            bindings = <
&trans  &kp ESCAPE         &trans             &kp UP_ARROW     &trans                &trans             &kp SQT            &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS   &trans
&trans  &kp LC(LG(SPACE))  &kp LEFT           &kp DOWN         &kp RIGHT             &kp LG(BACKSPACE)  &kp DOUBLE_QUOTES  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS  &trans
&trans  &kp LEFT_SHIFT     &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &kp LS(LG(NUMBER_4))  &kp LA(BACKSPACE)  &kp GRAVE          &kp N7        &kp N8        &kp NUMBER_9  &kp EQUAL  &trans
                                              &trans           &trans                &trans             &kp DEL            &kp NUMBER_0  &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DLLR        &kp PRCNT             &kp CARET  &kp AMPS      &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &trans
&trans  &ae              &kp RA(S)     &oe           &ue             &kp LS(LA(NUMBER_2))  &trans     &kp LA(LEFT)  &kp LA(RIGHT)    &kp LBKT  &kp RBKT  &trans
&trans  &bt BT_CLR       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3          &trans     &kp LG(LEFT)  &kp LG(RIGHT)    &kp LBRC  &kp RBRC  &trans
                                       &trans        &kp LEFT_SHIFT  &kp LG(BACKSPACE)     &trans     &trans        &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans          &trans  &trans             &trans             &trans      &trans              &kp LC(LA(LEFT))  &kp LC(LA(U))  &kp LC(LA(I))  &kp LC(LA(RIGHT))  &trans
&trans  &trans          &trans  &kp LS(LA(LG(K)))  &kp LS(LG(SEMI))   &trans      &kp LC(LA(RETURN))  &kp LC(LA(D))     &kp LC(LA(F))  &kp LC(LA(G))  &kp RETURN         &trans
&trans  &kp LEFT_SHIFT  &trans  &kp LS(LC(LG(C)))  &kp LS(LA(LG(C)))  &trans      &kp LC(LA(E))       &kp LC(LA(T))     &kp LC(LA(J))  &kp LC(LA(K))  &trans             &trans
                                &trans             &kp LEFT_GUI       &kp ESCAPE  &trans              &trans            &trans
            >;
        };
    };
};
