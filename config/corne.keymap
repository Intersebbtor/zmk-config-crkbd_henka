/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
//Layers 

#define Base 0
#define Lower 1
#define Raise 2
#define Funct 3

// #define block

// #define SCSH &kp LS(LG(NUMBER_4))

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    behaviors {
        tdA2: tap_dance_RALT_2 { // Tap: Right Alt; TapTap: Raise Layer [2]
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_RALT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 2>, <&kp RIGHT_ALT>;
            };

        tdg1: tap_dance_1 { // Tap: Left GUI; TapTap: ALT
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_GUI>, <&kp LALT>;
            };
    };
    combos {
    };

    macros {
        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI &kp LSHFT &kp NUMBER_4>,
                <&macro_release>,
                <&kp LEFT_GUI &kp LSHFT &kp NUMBER_4>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
  &kp TAB  &kp Q  &kp W  &kp E         &kp R          &kp T      &kp Y          &kp U      &kp I    &kp O     &kp P  &kp GRAVE
&kp LCTRL  &kp A  &kp S  &kp D         &kp F          &kp G      &kp H          &kp J      &kp K    &kp L  &kp SEMI  &kp ENTER
&kp LSHFT  &kp Z  &kp X  &kp C         &kp V          &kp B      &kp N          &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &mo 1  &tdg1  &kp BACKSPACE  &kp SPACE  &tdA2      &mo 3
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
  &kp ESC    &trans    &trans     &kp UP        &trans               &trans  &kp APOSTROPHE      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS   &kp DEL
&kp LCTRL    &trans    &kp LEFT   &kp DOWN      &kp RIGHT            &trans  &kp DOUBLE_QUOTES   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &kp RETURN
&kp LSHFT    &trans    &trans     &trans        &kp LS(LG(NUMBER_4)) &trans  &trans              &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp KP_MULTIPLY &trans
                                  &trans        &kp LEFT_GUI         &kp BACKSPACE          &kp SPACE  &kp RIGHT_ALT  &kp NUMBER_0
            >;
        };

        raise_layer {
            label = "Raise";
            bindings = <
&kp ESC      &kp EXCL  &kp AT    &kp HASH   &kp DLLR   &kp PRCNT  &kp CARET    &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL    &trans    &kp RA(S) &trans     &trans     &trans     &kp MINUS    &kp EQUAL &kp LBKT         &kp RBKT  &kp BSLH  &kp RETURN
&kp LSHFT    &trans    &trans    &trans     &trans     &trans     &kp UNDER    &kp PLUS  &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                               &trans  &kp LEFT_GUI  &kp LG(BACKSPACE)  &kp SPACE  &kp RIGHT_ALT           &trans
            >;
        };

        Funct_layer {
            label = "Funct";
            bindings = <
&bootloader  &trans        &trans        &trans        &trans        &trans           &trans  &kp LA(LC(U))  &kp LA(LC(I))  &trans  &trans  &trans 
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     &trans  &kp LA(LC(J))  &kp LA(LC(K))  &trans  &trans  &kp LA(LC(RETURN))
&trans       &trans        &trans        &trans        &trans        &trans           &trans  &kp LA(LC(LEFT))  &kp LA(LC(RIGHT))  &trans   &trans  &trans
                                         &trans        &trans        &trans     &trans  &trans  &trans
            >;
        };
    };
};
