ode/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
//Layers 

#define Base 0
#define Lower 1
#define Raise 2
#define Funct 3

// #define block
// #define SCSH &kp LS(LG(NUMBER_4))

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lslc: lslc {
            compatible = "zmk,behavior-tap-dance";
            label = "LSLC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_SHIFT>, <&kp LCTRL>;
        };

        rsra: rsra {
            compatible = "zmk,behavior-tap-dance";
            label = "RSRA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RIGHT_SHIFT>, <&kp RALT>;
        };

        mo13: mo13 {
            compatible = "zmk,behavior-tap-dance";
            label = "MO13";
            #binding-cells = <0>;
            bindings = <&mo 0>, <&mo 0>;
        };
    };

    macros {
        ae: ae {
            compatible = "zmk,behavior-macro";
            label = "AE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp A>;
        };

        oe: oe {
            compatible = "zmk,behavior-macro";
            label = "OE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp O>;
        };

        ue: ue {
            compatible = "zmk,behavior-macro";
            label = "UE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp U>;
        };
    };

    combos {
        compatible = "zmk,combos";

        FunctSwitch {
            bindings = <&kp CAPSLOCK>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&trans  &kp Q             &kp W  &kp E   &kp R             &kp T            &kp Y        &kp U        &kp I      &kp O    &kp P     &trans
&trans  &mt LEFT_ALT A    &kp S  &kp D   &kp F             &kp G            &kp H        &kp J        &kp K      &kp L    &kp SEMI  &trans
&trans  &mt LEFT_SHIFT Z  &kp X  &kp C   &kp V             &kp B            &kp N        &kp M        &kp COMMA  &kp DOT  &kp FSLH  &trans
                                 &trans  &mt LEFT_GUI TAB  &lt 1 BACKSPACE  &lt 3 SPACE  &lt 2 ENTER  &trans
            >;
        };

        layer_1 {
            bindings = <
&trans  &trans             &trans             &kp UP_ARROW     &trans                &trans  &kp SQT            &kp NUMBER_1       &kp NUMBER_2  &kp NUMBER_3  &kp PLUS   &trans
&trans  &kp LC(LG(SPACE))  &kp LEFT           &kp DOWN         &kp RIGHT             &trans  &kp DOUBLE_QUOTES  &kp NUMBER_4       &kp N5        &kp NUMBER_6  &kp MINUS  &trans
&trans  &kp LEFT_SHIFT     &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &kp LS(LG(NUMBER_4))  &trans  &kp GRAVE          &kp N7             &kp N8        &kp NUMBER_9  &kp EQUAL  &trans
                                              &trans           &trans                &trans  &kp DEL            &kp LG(BACKSPACE)  &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN        &kp HASH      &kp DLLR              &kp PRCNT  &kp CARET  &kp AMPS      &kp KP_MULTIPLY  &kp LPAR  &kp RPAR &trans
&trans  &ae              &kp RA(S)     &oe           &ue           &kp LS(LA(NUMBER_2))  &trans    &kp LA(LEFT)  &kp LA(RIGHT)    &kp LBKT  &kp RBKT &trans
&trans  &bt BT_CLR       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3          &trans     &kp LG(LEFT)  &kp LG(RIGHT)    &kp LBRC  &kp RBRC &trans
                                               &trans        &kp LEFT_SHIFT        &kp ESC   &trans &trans     &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp A   &kp A   &kp A  &kp A   &trans
&trans  &trans  &trans  &kp A   &kp A   &trans  &kp A   &kp A   &kp A   &kp A  &trans  &trans
&trans  &trans  &trans  &trans  &kp A   &trans  &kp A   &kp A   &kp A   &kp A  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
